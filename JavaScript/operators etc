References - 
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators

- Destructuring
  eg let arr = [1,2,3]; let [one,two,three] = arr; let [ one, , two] = arr
- By default JS involves type conversion while comparing. Only exceptions are '===' and '!==' which follow strict type checking.
- delete operator can be used to set an object or its property or element in array to undefined. It cannot be used on variables declared with var,let.
  Deleting an array element only sets its value to undefined but not reduce array length.
- typeof operator returns the type as a string
- void operator is used to evaluate an expression without returning anything.
- in operator returns true if the property name or array index is in the object.
  eg let arr = [1,2]; 0 in arr // true; 2 in arr // false; length in  arr // true; 
- instanceOf
- spread opertor
  eg var parts = ['shoulders', 'knees']; var lyrics = ['head', ...parts, 'and', 'toes'];
  eg function f(x, y, z) { }
     var args = [0, 1, 2]; f(...args);
     
Number Object :- It is built-in
- Number.MIN_VALUE, MAX_VALUE, POSITIVE_INFINITY, NEGATIVE_INFINITY
Math Object :- Built-in
- Just like in other languages as cpp, java
Date Object : Built-in
- JS does not have date datatype but a Date built-in object which can be used to create new dates.
- Stores as number of milisecs since 1 Jan 1970

Strings
- Starting with \x rerpresents hex, \u represents unicode.
- String Objects :- Wrapper around primitive string literals. 
  You can call any of the methods of the String object on a string literal valueâ€”JavaScript automatically converts the string literal to a temporary String object, calls the method, then discards the temporary String object. 
  You can also use the String.length property with a string literal.
- Template Literals :- Template literals are string literals allowing embedded expressions. 
  You can use multi-line strings and string interpolation features with them. 
  Enclosed within back ticks
  eg let a=5, b=2, c=`sum is ${a+b}`;
