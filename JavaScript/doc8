Iterators
- You can implement your own as a class/prototype constructor with a next function and other state information.
- Generators
  Generator functions are written using the function* syntax. 
  When called initially, generator functions do not execute any of their code, instead returning a type of iterator called a Generator.
  When a value is consumed by calling the generator's next method, the Generator function executes until it encounters the yield keyword.
  The function can be called as many times as desired and returns a new Generator each time, however each Generator may only be iterated once.
  eg function* makeRangeIterator(start = 0, end = 100, step = 1) {
        for (let i = start; i < end; i += step) {
            yield i;
        }
    }
  Generators compute their yielded values on demand, which allows them to efficiently represent sequences that are expensive to compute, or even infinite sequences as demonstrated above.
- Iterables
  An object is iterable if it defines its iteration behavior, such as what values are looped over in a for...of construct. 
  In order to be iterable, an object must have a property with a Symbol.iterator key.
  String, Array, TypedArray, Map and Set are all built-in iterables, because their prototype objects all have a Symbol.iterator method.
- Some expressions expect iteratables
  eg for..of, spread operator, yield *
- Advanced Generators
  The next() method also accepts a value which can be used to modify the internal state of the generator. A value passed to next() will be received by yield . 
  eg function* fibonacci() {
      var fn1 = 0; var fn2 = 1;
      while (true) {  
        var current = fn1; fn1 = fn2; fn2 = current + fn1;
        var reset = yield current;
        if (reset) {
            fn1 = 0; fn2 = 1;
        }
      }
    } 
    let gen = fibonacci(); gen.next() //0
    gen.next() // 1; gen.next() // 1; gen.next() // 2; gen.next(true) // 0; gen.next() // 1
