MetaProgramming (ES6 onwards)
- JavaScript gains support for the Proxy and Reflect objects allowing you to intercept and define custom behavior for fundamental language operations (e.g. property lookup, assignment, enumeration, function invocation, etc).
- Proxy
   Proxy objects allow you to intercept certain operations and to implement custom behaviors.
   eg var handler = {
      get: function(target, name) {
        return name in target ? target[name] : 42;
      }
    };
    var p = new Proxy({}, handler);
    p.a = 1;
    console.log(p.a, p.b); // 1, 42
  The Proxy object defines a target (an empty object here) and a handler object in which a get trap is implemented. 
  Here, an object that is proxied will not return undefined when getting undefined properties, but will instead return the number 42.
  Handler - object which contains traps, Traps - the intercepted operations, 
  target - Object which the proxy virtualizes. It is often used as storage backend for the proxy, Invariants (semantics that remain unchanged) regarding object non-extensibility or non-configurable properties are verified against the target.
  invariants - Semantics that remain unchanged when implementing custom operations are called invariants. 
- Revocable Proxy :- Proxy can be turned off using the Proxy.revoke() function. Afterwards, any operation on the proxy leads to a TypeError.
  eg var revocable = Proxy.revocable({}, {
      get: function(target, name) {
        return '[[' + name + ']]';
      }
    });
    var proxy = revocable.proxy;
    console.log(proxy.foo); // "[[foo]]"
    revocable.revoke();
    console.log(proxy.foo);  // TypeError is thrown
    proxy.foo = 1;           // TypeError again
- Reflection
